)
require("jsonlite")
require("RCurl")
require(ggplot2)
require(dplyr)
require(extrafont)
df <- data.frame(fromJSON(getURL(URLencode('skipper.cs.utexas.edu:5001/rest/native/?query="select * from shootingsmass"'),httpheader=c(DB='jdbc:oracle:thin:@sayonara.microlab.cs.utexas.edu:1521:orcl', USER='C##cs329e_btb687', PASS='orcl_btb687', MODE='native_mode', MODEL='model', returnDimensions = 'False', returnFor = 'JSON'), verbose = TRUE), ))
View (df)
ggplot() +
coord_cartesian() +
scale_x_discrete() +
scale_y_continuous() +
#facet_grid(FATALITIES, labeller=label_both) +
labs(title='Mass Shootings') +
labs(x="Venue", y=paste("Injured")) +
layer(data=df,
mapping=aes(x=VENUE, y=as.numeric(as.character(INJURED))),
stat="identity",
stat_params=list(),
geom="point",
geom_params=list(),
#position=position_identity()
position=position_jitter(width=0.3, height=0)
)
require("jsonlite")
require("RCurl")
require(ggplot2)
require(dplyr)
require(extrafont)
df <- data.frame(fromJSON(getURL(URLencode('skipper.cs.utexas.edu:5001/rest/native/?query="select * from shootingsmass"'),httpheader=c(DB='jdbc:oracle:thin:@sayonara.microlab.cs.utexas.edu:1521:orcl', USER='C##cs329e_btb687', PASS='orcl_btb687', MODE='native_mode', MODEL='model', returnDimensions = 'False', returnFor = 'JSON'), verbose = TRUE), ))
View (df)
ggplot() +
coord_cartesian() +
scale_x_discrete() +
scale_y_continuous() +
#facet_grid(FATALITIES, labeller=label_both) +
labs(title='Mass Shootings') +
labs(x="Venue", y=paste("Injured")) +
layer(data=df,
mapping=aes(x=VENUE, y=as.numeric(as.character(TOTAL_VICTIMS))),
stat="identity",
stat_params=list(),
geom="point",
geom_params=list(),
#position=position_identity()
position=position_jitter(width=0.3, height=0)
)
require("jsonlite")
require("RCurl")
require(ggplot2)
require(dplyr)
require(extrafont)
df <- data.frame(fromJSON(getURL(URLencode('skipper.cs.utexas.edu:5001/rest/native/?query="select * from shootingsmass"'),httpheader=c(DB='jdbc:oracle:thin:@sayonara.microlab.cs.utexas.edu:1521:orcl', USER='C##cs329e_btb687', PASS='orcl_btb687', MODE='native_mode', MODEL='model', returnDimensions = 'False', returnFor = 'JSON'), verbose = TRUE), ))
View (df)
ggplot() +
coord_cartesian() +
scale_x_discrete() +
scale_y_continuous() +
#facet_grid(FATALITIES, labeller=label_both) +
labs(title='Mass Shootings') +
labs(x="Venue", y=paste("Total Victims")) +
layer(data=df,
mapping=aes(x=VENUE, y=as.numeric(as.character(TOTAL_VICTIMS))),
stat="identity",
stat_params=list(),
geom="point",
geom_params=list(),
#position=position_identity()
position=position_jitter(width=0.3, height=0)
)
require("jsonlite")
require("RCurl")
require(ggplot2)
require(dplyr)
require(extrafont)
df <- data.frame(fromJSON(getURL(URLencode('skipper.cs.utexas.edu:5001/rest/native/?query="select * from shootingsmass"'),httpheader=c(DB='jdbc:oracle:thin:@sayonara.microlab.cs.utexas.edu:1521:orcl', USER='C##cs329e_btb687', PASS='orcl_btb687', MODE='native_mode', MODEL='model', returnDimensions = 'False', returnFor = 'JSON'), verbose = TRUE), ))
View (df)
ggplot() +
coord_cartesian() +
scale_x_discrete() +
scale_y_continuous() +
#facet_grid(FATALITIES, labeller=label_both) +
labs(title='Mass Shootings') +
labs(x="Venue", y=paste("Total Victims")) +
layer(data=df,
mapping=aes(x=VENUE, y=as.numeric(as.character(TOTAL_VICTIMS)), color=FATALITIES),
stat="identity",
stat_params=list(),
geom="point",
geom_params=list(),
#position=position_identity()
position=position_jitter(width=0.3, height=0)
)
require("jsonlite")
require("RCurl")
require(ggplot2)
require(dplyr)
require(extrafont)
df <- data.frame(fromJSON(getURL(URLencode('skipper.cs.utexas.edu:5001/rest/native/?query="select * from shootingsmass"'),httpheader=c(DB='jdbc:oracle:thin:@sayonara.microlab.cs.utexas.edu:1521:orcl', USER='C##cs329e_btb687', PASS='orcl_btb687', MODE='native_mode', MODEL='model', returnDimensions = 'False', returnFor = 'JSON'), verbose = TRUE), ))
View (df)
ggplot() +
coord_cartesian() +
scale_x_discrete() +
scale_y_continuous() +
#facet_grid(FATALITIES, labeller=label_both) +
labs(title='Mass Shootings') +
labs(x="Venue", y=paste("Total Victims")) +
layer(data=df,
mapping=aes(x=VENUE, y=as.numeric(as.character(TOTAL_VICTIMS)), color=FATALITIES),
stat="identity",
stat_params=list(),
geom="point",
geom_params=list(),
#position=position_identity()
position=position_jitter(width=0.3, height=0)
)
# server.R
require("jsonlite")
require("RCurl")
require(ggplot2)
require(dplyr)
require(shiny)
shinyServer(function(input, output) {
output$distPlot <- renderPlot({
# Start your code here.
# The following is equivalent to KPI Story 2 Sheet 2 and Parameters Story 3 in "Crosstabs, KPIs, Barchart.twb"
KPI_Low_Max_value = input$KPI1
KPI_Medium_Max_value = input$KPI2
df <- data.frame(fromJSON(getURL(URLencode(gsub("\n", " ", 'skipper.cs.utexas.edu:5001/rest/native/?query=
"select color, clarity, sum_price, round(sum_carat) as sum_carat, kpi as ratio,
case
when kpi < "p1" then \\\'03 Low\\\'
when kpi < "p2" then \\\'02 Medium\\\'
else \\\'01 High\\\'
end kpi
from (select color, clarity,
sum(price) as sum_price, sum(carat) as sum_carat,
sum(price) / sum(carat) as kpi
from diamonds
group by color, clarity)
order by clarity;"
')), httpheader=c(DB='jdbc:oracle:thin:@sayonara.microlab.cs.utexas.edu:1521:orcl', USER='C##cs329e_UTEid', PASS='orcl_UTEid', MODE='native_mode', MODEL='model', returnDimensions = 'False', returnFor = 'JSON', p1=KPI_Low_Max_value, p2=KPI_Medium_Max_value), verbose = TRUE)))
# df <- diamonds %>% group_by(color, clarity) %>% summarize(sum_price = sum(price), sum_carat = sum(carat)) %>% mutate(ratio = sum_price / sum_carat) %>% mutate(kpi = ifelse(ratio <= KPI_Low_Max_value, '03 Low', ifelse(ratio <= KPI_Medium_Max_value, '02 Medium', '01 High'))) %>% rename(COLOR=color, CLARITY=clarity, SUM_PRICE=sum_price, SUM_CARAT=sum_carat, RATIO=ratio, KPI=kpi)
plot <- ggplot() +
coord_cartesian() +
scale_x_discrete() +
scale_y_discrete() +
labs(title='Diamonds Crosstab\nSUM_PRICE, SUM_CARAT, SUM_PRICE / SUM_CARAT') +
labs(x=paste("COLOR"), y=paste("CLARITY")) +
layer(data=df,
mapping=aes(x=COLOR, y=CLARITY, label=SUM_PRICE),
stat="identity",
stat_params=list(),
geom="text",
geom_params=list(colour="black"),
position=position_identity()
) +
layer(data=df,
mapping=aes(x=COLOR, y=CLARITY, fill=KPI),
stat="identity",
stat_params=list(),
geom="tile",
geom_params=list(alpha=0.50),
position=position_identity()
)
# End your code here.
return(plot)
})
})
#ui.R
library(shiny)
# Define UI for application that plots random distributions
shinyUI(pageWithSidebar(
# Application title
headerPanel("Hello Shiny!"),
# Sidebar with a slider input for number of observations
sidebarPanel(
sliderInput("KPI1",
"KPI_Low_Max_value:",
min = 1,
max = 4750,
value = 4750),
sliderInput("KPI2",
"KPI_Medium_Max_value:",
min = 4750,
max = 5000,
value = 5000)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("distPlot")
)
))
#ui.R
library(shiny)
# Define UI for application that plots random distributions
shinyUI(pageWithSidebar(
# Application title
headerPanel("Hello Shiny!"),
# Sidebar with a slider input for number of observations
sidebarPanel(
sliderInput("KPI1",
"KPI_Low_Max_value:",
min = 1,
max = 4750,
value = 4750),
sliderInput("KPI2",
"KPI_Medium_Max_value:",
min = 4750,
max = 5000,
value = 5000)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("distPlot")
)
))
# server.R
require("jsonlite")
require("RCurl")
require(ggplot2)
require(dplyr)
require(shiny)
shinyServer(function(input, output) {
output$distPlot <- renderPlot({
# Start your code here.
# The following is equivalent to KPI Story 2 Sheet 2 and Parameters Story 3 in "Crosstabs, KPIs, Barchart.twb"
KPI_Low_Max_value = input$KPI1
KPI_Medium_Max_value = input$KPI2
df <- data.frame(fromJSON(getURL(URLencode(gsub("\n", " ", 'skipper.cs.utexas.edu:5001/rest/native/?query=
"select color, clarity, sum_price, round(sum_carat) as sum_carat, kpi as ratio,
case
when kpi < "p1" then \\\'03 Low\\\'
when kpi < "p2" then \\\'02 Medium\\\'
else \\\'01 High\\\'
end kpi
from (select color, clarity,
sum(price) as sum_price, sum(carat) as sum_carat,
sum(price) / sum(carat) as kpi
from diamonds
group by color, clarity)
order by clarity;"
')), httpheader=c(DB='jdbc:oracle:thin:@sayonara.microlab.cs.utexas.edu:1521:orcl', USER='C##cs329e_UTEid', PASS='orcl_UTEid', MODE='native_mode', MODEL='model', returnDimensions = 'False', returnFor = 'JSON', p1=KPI_Low_Max_value, p2=KPI_Medium_Max_value), verbose = TRUE)))
# df <- diamonds %>% group_by(color, clarity) %>% summarize(sum_price = sum(price), sum_carat = sum(carat)) %>% mutate(ratio = sum_price / sum_carat) %>% mutate(kpi = ifelse(ratio <= KPI_Low_Max_value, '03 Low', ifelse(ratio <= KPI_Medium_Max_value, '02 Medium', '01 High'))) %>% rename(COLOR=color, CLARITY=clarity, SUM_PRICE=sum_price, SUM_CARAT=sum_carat, RATIO=ratio, KPI=kpi)
plot <- ggplot() +
coord_cartesian() +
scale_x_discrete() +
scale_y_discrete() +
labs(title='Diamonds Crosstab\nSUM_PRICE, SUM_CARAT, SUM_PRICE / SUM_CARAT') +
labs(x=paste("COLOR"), y=paste("CLARITY")) +
layer(data=df,
mapping=aes(x=COLOR, y=CLARITY, label=SUM_PRICE),
stat="identity",
stat_params=list(),
geom="text",
geom_params=list(colour="black"),
position=position_identity()
) +
layer(data=df,
mapping=aes(x=COLOR, y=CLARITY, fill=KPI),
stat="identity",
stat_params=list(),
geom="tile",
geom_params=list(alpha=0.50),
position=position_identity()
)
# End your code here.
return(plot)
})
})
# server.R
require("jsonlite")
require("RCurl")
require(ggplot2)
require(dplyr)
require(shiny)
shinyServer(function(input, output) {
output$distPlot <- renderPlot({
# Start your code here.
# The following is equivalent to KPI Story 2 Sheet 2 and Parameters Story 3 in "Crosstabs, KPIs, Barchart.twb"
KPI_Low_Max_value = input$KPI1
KPI_Medium_Max_value = input$KPI2
df <- data.frame(fromJSON(getURL(URLencode(gsub("\n", " ", 'skipper.cs.utexas.edu:5001/rest/native/?query=
"select color, clarity, sum_price, round(sum_carat) as sum_carat, kpi as ratio,
case
when kpi < "p1" then \\\'03 Low\\\'
when kpi < "p2" then \\\'02 Medium\\\'
else \\\'01 High\\\'
end kpi
from (select color, clarity,
sum(price) as sum_price, sum(carat) as sum_carat,
sum(price) / sum(carat) as kpi
from diamonds
group by color, clarity)
order by clarity;"
')), httpheader=c(DB='jdbc:oracle:thin:@sayonara.microlab.cs.utexas.edu:1521:orcl', USER='C##cs329e_UTEid', PASS='orcl_UTEid', MODE='native_mode', MODEL='model', returnDimensions = 'False', returnFor = 'JSON', p1=KPI_Low_Max_value, p2=KPI_Medium_Max_value), verbose = TRUE)))
# df <- diamonds %>% group_by(color, clarity) %>% summarize(sum_price = sum(price), sum_carat = sum(carat)) %>% mutate(ratio = sum_price / sum_carat) %>% mutate(kpi = ifelse(ratio <= KPI_Low_Max_value, '03 Low', ifelse(ratio <= KPI_Medium_Max_value, '02 Medium', '01 High'))) %>% rename(COLOR=color, CLARITY=clarity, SUM_PRICE=sum_price, SUM_CARAT=sum_carat, RATIO=ratio, KPI=kpi)
plot <- ggplot() +
coord_cartesian() +
scale_x_discrete() +
scale_y_discrete() +
labs(title='Diamonds Crosstab\nSUM_PRICE, SUM_CARAT, SUM_PRICE / SUM_CARAT') +
labs(x=paste("COLOR"), y=paste("CLARITY")) +
layer(data=df,
mapping=aes(x=COLOR, y=CLARITY, label=SUM_PRICE),
stat="identity",
stat_params=list(),
geom="text",
geom_params=list(colour="black"),
position=position_identity()
) +
layer(data=df,
mapping=aes(x=COLOR, y=CLARITY, fill=KPI),
stat="identity",
stat_params=list(),
geom="tile",
geom_params=list(alpha=0.50),
position=position_identity()
)
# End your code here.
return(plot)
})
})
install.packages("shiny")
# server.R
require("jsonlite")
require("RCurl")
require(ggplot2)
require(dplyr)
require(shiny)
shinyServer(function(input, output) {
output$distPlot <- renderPlot({
# Start your code here.
# The following is equivalent to KPI Story 2 Sheet 2 and Parameters Story 3 in "Crosstabs, KPIs, Barchart.twb"
KPI_Low_Max_value = input$KPI1
KPI_Medium_Max_value = input$KPI2
df <- data.frame(fromJSON(getURL(URLencode(gsub("\n", " ", 'skipper.cs.utexas.edu:5001/rest/native/?query=
"select color, clarity, sum_price, round(sum_carat) as sum_carat, kpi as ratio,
case
when kpi < "p1" then \\\'03 Low\\\'
when kpi < "p2" then \\\'02 Medium\\\'
else \\\'01 High\\\'
end kpi
from (select color, clarity,
sum(price) as sum_price, sum(carat) as sum_carat,
sum(price) / sum(carat) as kpi
from diamonds
group by color, clarity)
order by clarity;"
')), httpheader=c(DB='jdbc:oracle:thin:@sayonara.microlab.cs.utexas.edu:1521:orcl', USER='C##cs329e_UTEid', PASS='orcl_UTEid', MODE='native_mode', MODEL='model', returnDimensions = 'False', returnFor = 'JSON', p1=KPI_Low_Max_value, p2=KPI_Medium_Max_value), verbose = TRUE)))
# df <- diamonds %>% group_by(color, clarity) %>% summarize(sum_price = sum(price), sum_carat = sum(carat)) %>% mutate(ratio = sum_price / sum_carat) %>% mutate(kpi = ifelse(ratio <= KPI_Low_Max_value, '03 Low', ifelse(ratio <= KPI_Medium_Max_value, '02 Medium', '01 High'))) %>% rename(COLOR=color, CLARITY=clarity, SUM_PRICE=sum_price, SUM_CARAT=sum_carat, RATIO=ratio, KPI=kpi)
plot <- ggplot() +
coord_cartesian() +
scale_x_discrete() +
scale_y_discrete() +
labs(title='Diamonds Crosstab\nSUM_PRICE, SUM_CARAT, SUM_PRICE / SUM_CARAT') +
labs(x=paste("COLOR"), y=paste("CLARITY")) +
layer(data=df,
mapping=aes(x=COLOR, y=CLARITY, label=SUM_PRICE),
stat="identity",
stat_params=list(),
geom="text",
geom_params=list(colour="black"),
position=position_identity()
) +
layer(data=df,
mapping=aes(x=COLOR, y=CLARITY, fill=KPI),
stat="identity",
stat_params=list(),
geom="tile",
geom_params=list(alpha=0.50),
position=position_identity()
)
# End your code here.
return(plot)
})
})
#ui.R
library(shiny)
# Define UI for application that plots random distributions
shinyUI(pageWithSidebar(
# Application title
headerPanel("Hello Shiny!"),
# Sidebar with a slider input for number of observations
sidebarPanel(
sliderInput("KPI1",
"KPI_Low_Max_value:",
min = 1,
max = 4750,
value = 4750),
sliderInput("KPI2",
"KPI_Medium_Max_value:",
min = 4750,
max = 5000,
value = 5000)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("distPlot")
)
))
shiny::runApp('C:/DataViz/DrCannata/RWorkshop/09Shiny')
shiny::runApp('C:/DataViz/DrCannata/RWorkshop/09Shiny')
shiny::runApp('C:/DataViz/DrCannata/RWorkshop/09Shiny')
install.packages("devtools")
devtools::install_github('rstudio/shinyapps')
shinyapps::setAccountInfo(name='bswass',
token='5ACE1316CCC2E7A9C5A09C5920E92592',
secret='<SECRET>')
shinyapps::setAccountInfo(name='bswass',
token='5ACE1316CCC2E7A9C5A09C5920E92592',
secret='DMhH3pbH7WoNdxCKytwv31Z/hRjkXN8JIxLTiyxa')
setwd("C:/DataViz/4. Tableau Project 1/01 Data")
require(tidyr)
require(dplyr)
require(ggplot2)
setwd("C:/DataViz/4. Tableau Project 1/01 Data")
file_path <- "Homicides.csv"
df <- read.csv(file_path, stringsAsFactors = FALSE)
# Replace "." (i.e., period) with "_" in the column names.
names(df) <- gsub("\\.+", "_", names(df))
summary(df)
require(tidyr)
require(dplyr)
require(ggplot2)
setwd("C:/DataViz/4. Tableau Project 1/01 Data")
file_path <- "Homicides.csv"
df <- read.csv(file_path, stringsAsFactors = FALSE)
# Replace "." (i.e., period) with "_" in the column names.
names(df) <- gsub("\\.+", "_", names(df))
# summary(df) # Uncomment this and  run just the lines to here to get column types to use for getting the list of measures.
measures <- c("Year", "Rate_per_100_000_persons")
#measures <- NA # Do this if there are no measures.
# Get rid of special characters in each column.
# Google ASCII Table to understand the following:
for(n in names(df)) {
df[n] <- data.frame(lapply(df[n], gsub, pattern="[^ -~]",replacement= ""))
}
dimensions <- setdiff(names(df), measures)
if( length(measures) > 1 || ! is.na(dimensions)) {
for(d in dimensions) {
# Get rid of " and ' in dimensions.
df[d] <- data.frame(lapply(df[d], gsub, pattern="[\"']",replacement= ""))
# Change & to and in dimensions.
df[d] <- data.frame(lapply(df[d], gsub, pattern="&",replacement= " and "))
# Change : to ; in dimensions.
df[d] <- data.frame(lapply(df[d], gsub, pattern=":",replacement= ";"))
}
}
library(lubridate)
# The following is an example of dealing with special cases like making state abbreviations be all upper case.
# df["State"] <- data.frame(lapply(df["State"], toupper))
# Get rid of all characters in measures except for numbers, the - sign, and period.dimensions
if( length(measures) > 1 || ! is.na(measures)) {
for(m in measures) {
df[m] <- data.frame(lapply(df[m], gsub, pattern="[^--.0-9]",replacement= ""))
}
}
write.csv(df, paste(gsub(".csv", "", file_path), ".reformatted.csv", sep=""), row.names=FALSE, na = "")
tableName <- gsub(" +", "_", gsub("[^A-z, 0-9, ]", "", gsub(".csv", "", file_path)))
sql <- paste("CREATE TABLE", tableName, "(\n-- Change table_name to the table name you want.\n")
if( length(measures) > 1 || ! is.na(dimensions)) {
for(d in dimensions) {
sql <- paste(sql, paste(d, "varchar2(4000),\n"))
}
}
if( length(measures) > 1 || ! is.na(measures)) {
for(m in measures) {
if(m != tail(measures, n=1)) sql <- paste(sql, paste(m, "number(38,4),\n"))
else sql <- paste(sql, paste(m, "number(38,4)\n"))
}
}
sql <- paste(sql, ");")
cat(sql)
require("jsonlite")
require("RCurl")
require(ggplot2)
require(dplyr)
require(extrafont)
df <- data.frame(fromJSON(getURL(URLencode('skipper.cs.utexas.edu:5001/rest/native/?query="select * from shootingsmass"'),httpheader=c(DB='jdbc:oracle:thin:@sayonara.microlab.cs.utexas.edu:1521:orcl', USER='C##cs329e_btb687', PASS='orcl_btb687', MODE='native_mode', MODEL='model', returnDimensions = 'False', returnFor = 'JSON'), verbose = TRUE), ))
View (df)
ggplot() +
coord_cartesian() +
scale_x_discrete() +
scale_y_continuous() +
#facet_grid(FATALITIES, labeller=label_both) +
labs(title='Mass Shootings') +
labs(x="Venue", y=paste("INJURED")) +
layer(data=df,
mapping=aes(x=VENUE, y=as.numeric(as.character(INJURED))),
stat="identity",
stat_params=list(),
geom="point",
geom_params=list(),
#position=position_identity()
position=position_jitter(width=0.3, height=0)
)
ggplot() +
coord_cartesian() +
scale_x_discrete() +
scale_y_continuous() +
#facet_grid(FATALITIES, labeller=label_both) +
labs(x="Venue", y=paste("FATALITIES")) +
layer(data=df,
mapping=aes(x=VENUE, y=as.numeric(as.character(FATALITIES))),
stat="identity",
stat_params=list(),
geom="point",
geom_params=list(),
#position=position_identity()
position=position_jitter(width=0.3, height=0)
)
